#! /bin/bash

# Name: rclone_sync - sync to bucket s3 by rclone
# Usage:
#     rclone_sync [ -h|--help ] [ -H|--Help ]
#         [ -l|--copy-links ] [ --skip-links ]
#         [ -q|--quiet ] [ -v|--verbose ]
#         [ -n|--dry-run ]
#         [ -o|--options <sync_opts> ]
#         [ -I|--filter-from <file> ]
#         <local_path> <remote:bucket/path>
# Options:
#     -h|--help                : print usage
#     -H|--Help                : print description
#     -l|--copy-links          : follow symlinks  [no]
#     --skip-links             : don't warn about skipped symlinks  [no]
#     -q|--quiet               : log-level = ERROR  [no]
#     -v|--verbose             : log-level = INFO  [no]
#     -n|--dry-run             : dry-run  [no]
#     -o|--options <sync_opts> : sync options  []
#     -I|--filter-from <file>  : read filtering pattern from <file>
#     <local_path>             : local path to sync
#     <remote:bucket/path>     : remote path
# Author: Marco Broglia (marco.broglia@mutex.it)
# Date: 2023.09.15

#
# vars
#

# command and prog

command="$0"; [ $# -gt 0 ] && command="$command $*"
prog=$(basename $0)

# dirs & files

home=$(dirname $(dirname $0))

logf=$home/log/$prog.log
logt=$logf.t

# cmds

rclone=/bin/rclone

# vars

opts="--config $home/etc/rclone.conf --local-no-check-updated --stats 42h"

#
# funcs
#

now()   { date '+%Y.%m.%d-%H:%M:%S'; }
log()   { echo "$(now) [$prog:$$] $*" >> $logf; }
usage() { echo "$help"; }

t()       { date +%s.%N; }
elapsed() { printf "%.3f" $(echo "$2 - $1" | bc); }

#
# opts
#

help=$(sed -n '/^# Usage:/,/^# [^ ]/p' $0 | sed '$d;s/^# //')
Help=$(sed -n '/^# Options:/,/^# [^ ]/p' $0 | sed '$d;s/^# //')

OPTS=$(getopt                                                          \
    -o hHlqvno:I:                                                      \
    -l help,Help,copy-links,skip-links,quiet,verbose,dry-run,options:, \
    -l filter-from:                                                    \
    -n $prog -- "$@")
[ $? -eq 0 ] || { usage; exit 1; }

eval set -- "$OPTS"

while :; do
    case "$1" in
        -h|--help)
            echo "$help"; exit 0 ;;
        -H|--Help)
            echo "$Help"; exit 0 ;;
        -l|--copy-links)
            links=1; shift ;;
        --skip-links)
            skip_links=1; shift ;;
        -q|--quiet)
            quiet=1; shift ;;
        -v|--verbose)
            verbose=1; shift ;;
        -n|--dry-run)
            dryrun=1; shift ;;
        -o|--options)
            myopts+=" $2"; shift 2 ;;
        -I|--filter-from)
            from=$2; shift 2 ;;
        --)
            shift; break ;;
        *)
            usage; exit 1 ;;
    esac
done
myopts=${myopts# }

[ $# != 2 ] && { usage; exit 2; }
lpath="$1" rpath="$2"

#
# main
#

# start

t0=$(t)
log "start '$prog' ('$command')"

# opts

[ $links ]      && opts+=" --copy-links"
[ $skip_links ] && opts+=" --skip-links"
[ $quiet ]      && opts+=" --quiet"
[ $verbose ]    && opts+=" --verbose"
[ $dryrun ]     && opts+=" --dry-run"
[ "$myopts" ]   && opts+=" $myopts"
[ $from ]       && opts+=" --filter-from $from"
log "options: '$opts'"

# run

log "run '$rclone sync $opts $lpath $rpath'"
tt0=$(t)
$rclone sync $opts $lpath $rpath &> $logt
tt1=$(t)
elapsed=$(elapsed $tt0 $tt1)
if [ -s $logt ]; then
    set -- $(grep '^Transferred:.*%$' $logt | awk '{ print $2, $4 }' | tr -d ,)
    x=${1:-0} y=${2:-0}
    d=$(grep ^Deleted: $logt | tail -1 | awk '{ print $2 }')
    { echo "--"; cat $logt; echo "--"; } >> $logf
    log "${dryrun:+(dryrun) }objects: $x/$y transferred, ${d:-0} deleted"
fi
log "sync '$lpath' -> '$rpath' done (${elapsed}s)"

# end

t1=$(t)
log "elapsed time: $(elapsed $t0 $t1)s"

log "end '$prog'"

# exit

exit 0
